{"version":3,"file":"static/js/438.e3fbf3d3.chunk.js","mappings":"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","sources":["components/FiltersForm/FiltersForm.jsx","pages/CatalogPage/CatalogPage.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setFilters, clearFilters } from \"../../redux/filtersSlice\";\nimport {\n  selectUniqueCarBrands,\n  selectRentalPrices,\n} from \"../../redux/selectors\";\nimport Select from \"react-select\";\n// import { Container } from \"./FiltersForm.styled\";\n\nconst FiltersForm = () => {\n  const dispatch = useDispatch();\n  const uniqueCarBrands = useSelector(selectUniqueCarBrands);\n  const rentalPrices = useSelector(selectRentalPrices);\n\n  // Локальний стан для збереження даних форми\n  const [formData, setFormData] = useState({\n    brand: \"\",\n    price: \"\",\n    minMileage: \"\",\n    maxMileage: \"\",\n  });\n\n  // Очистка filters в Redux Store при розмонтуванні компонента (componentWillUnmount )\n  useEffect(() => {\n    return () => {\n      dispatch(clearFilters());\n    };\n  }, [dispatch]);\n\n  // Отримання об'єктів для використання у випадаючому списку car_brand\n  const brandOptions = uniqueCarBrands.map((brand) => ({\n    value: brand,\n    label: brand,\n  }));\n\n  // Отримання об'єктів для використання у випадаючому списку price\n  const priceOptions = rentalPrices.map((price) => ({\n    value: price,\n    label: `То ${price}$`,\n  }));\n\n  // Функції для обробки вибору користувачем параметрів фільтрації\n  const handleBrandChange = (selectedOption) => {\n    setFormData({\n      ...formData,\n      brand: selectedOption ? selectedOption.value : \"\",\n    });\n  };\n\n  const handlePriceChange = (selectedOption) => {\n    setFormData({\n      ...formData,\n      price: selectedOption ? Number(selectedOption.value) : \"\",\n    });\n  };\n\n  const handleMinMileage = (event) => {\n    // Видаляємо всі коми в minMileage перед конвертацією у число\n    const value = parseInt(event.target.value.replace(/,/g, \"\"), 10);\n    if (!isNaN(value) && value >= 0) {\n      setFormData({ ...formData, minMileage: value });\n    }\n  };\n\n  const handleMaxMileage = (event) => {\n    // Видаляємо всі коми в maxMileage перед конвертацією у число\n    const value = parseInt(event.target.value.replace(/,/g, \"\"), 10);\n    if (!isNaN(value) && value >= 0) {\n      setFormData({ ...formData, maxMileage: value });\n    }\n  };\n\n  // При \"Submit\" форми відправляємо action для збереження filters в Redux Store\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    dispatch(setFilters(formData));\n  };\n\n  // При \"Reset\" відправляємо action для очистки filters в Redux Store\n  const handleReset = () => {\n    dispatch(clearFilters());\n    // Очистка форми на сторінці\n    setFormData({\n      brand: \"\",\n      price: \"\",\n      minMileage: \"\",\n      maxMileage: \"\",\n    });\n  };\n\n  // Функція для форматування числа з комами для відображення в inputs \"Сar mileage / km\"\n  const formatNumberWithCommas = (value) => {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit} autoComplete=\"off\">\n      <div>\n        <label htmlFor=\"car_brand\">Car brand</label>\n        <Select\n          id=\"car_brand\"\n          name=\"brand\"\n          placeholder=\"Enter the text\"\n          onChange={handleBrandChange}\n          options={brandOptions}\n          value={\n            formData.brand\n              ? brandOptions.find((option) => option.value === formData.brand)\n              : null\n          }\n          isClearable={true}\n          isSearchable={true}\n          blurInputOnSelect={true}\n        />\n      </div>\n\n      <div>\n        <label htmlFor=\"price\">Price / 1 hour</label>\n        <Select\n          id=\"price\"\n          name=\"price\"\n          placeholder=\"To $\"\n          onChange={handlePriceChange}\n          options={priceOptions}\n          value={\n            formData.price\n              ? priceOptions.find(\n                  (option) => option.value === String(formData.price)\n                )\n              : null\n          }\n          isClearable={true}\n          isSearchable={true}\n          blurInputOnSelect={true}\n        />\n      </div>\n\n      <div>Сar mileage / km</div>\n      <label htmlFor=\"car_mileage_from\">From</label>\n      <input\n        id=\"car_mileage_from\"\n        type=\"text\"\n        name=\"mileageFrom\"\n        value={formatNumberWithCommas(formData.minMileage)}\n        onChange={handleMinMileage}\n      ></input>\n\n      <label htmlFor=\"car_mileage_to\">To</label>\n      <input\n        id=\"car_mileage_to\"\n        type=\"text\"\n        name=\"mileageTo\"\n        value={formatNumberWithCommas(formData.maxMileage)}\n        onChange={handleMaxMileage}\n      ></input>\n\n      <button type=\"submit\">Search</button>\n      <button type=\"button\" onClick={handleReset}>\n        Reset\n      </button>\n    </form>\n  );\n};\n\nexport default FiltersForm;\n","import { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  selectItemLimitCars,\n  selectIsLoading,\n  selectError,\n  selectAllCars,\n  selectFilters,\n} from \"../../redux/selectors\";\nimport {\n  fetchLimitCars,\n  fetchLoadMoreCars,\n  fetchAllCars,\n} from \"../../redux/carsOperations\";\nimport CarCard from \"../../components/CarCard\";\nimport FiltersForm from \"../../components/FiltersForm\";\nimport {\n  Container,\n  CatalogList,\n  BtnLoadMore,\n  PCenterText,\n} from \"./CatalogPage.styled\";\n\nconst CatalogPage = () => {\n  const dispatch = useDispatch();\n  const itemLimitCars = useSelector(selectItemLimitCars);\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n  const allCars = useSelector(selectAllCars);\n  const filters = useSelector(selectFilters);\n  const [currentPage, setCurrentPage] = useState(2);\n\n  useEffect(() => {\n    dispatch(fetchLimitCars());\n    dispatch(fetchAllCars());\n  }, [dispatch]);\n\n  const handleLoadMore = () => {\n    dispatch(fetchLoadMoreCars(currentPage));\n    setCurrentPage((prevPage) => prevPage + 1);\n  };\n\n  // Функція для фільтрації списку всіх автомобілів\n  const getVisibleCarsByFilters = (allCars, filters) => {\n    const { brand, price, minMileage, maxMileage } = filters;\n\n    let filteredCars = [...allCars]; // Копія cars для фільтрування\n\n    // Послідовно фільтруємо за значеннями фільтрів, якщо вони вказані\n    if (brand) {\n      filteredCars = filteredCars.filter((car) => car.make === brand);\n    }\n    if (price) {\n      filteredCars = filteredCars.filter(\n        (car) => Number(car.rentalPrice.slice(1)) <= price\n      );\n    }\n    if (minMileage) {\n      filteredCars = filteredCars.filter((car) => car.mileage >= minMileage);\n    }\n    if (maxMileage) {\n      filteredCars = filteredCars.filter((car) => car.mileage <= maxMileage);\n    }\n\n    return filteredCars;\n  };\n\n  // Якщо є хоча б один фільтр - getVisibleCarsByFilters, інакше рендеримо itemLimitCars (12 карток)\n  const visibleCars =\n    filters.brand || filters.price || filters.minMileage || filters.maxMileage\n      ? getVisibleCarsByFilters(allCars, filters)\n      : itemLimitCars;\n\n  const isShowList = visibleCars.length > 0;\n\n  const isShowButton =\n    visibleCars.length > 0 && !isLoading && !(visibleCars.length % 12);\n\n  return (\n    <section>\n      <Container>\n        {!isLoading && <FiltersForm />}\n\n        {isLoading && !error && (\n          <PCenterText>Request in progress...</PCenterText>\n        )}\n\n        {isShowList && (\n          <CatalogList>\n            {visibleCars.map((car) => (\n              <li key={car.id}>\n                <CarCard car={car} />\n              </li>\n            ))}\n          </CatalogList>\n        )}\n\n        {!isLoading && !isShowList && (\n          <PCenterText>No cars found with selected filters.</PCenterText>\n        )}\n\n        {isShowButton && (\n          <BtnLoadMore type=\"button\" onClick={handleLoadMore}>\n            Load more\n          </BtnLoadMore>\n        )}\n\n        {error && <PCenterText>{error}</PCenterText>}\n      </Container>\n    </section>\n  );\n};\n\nexport default CatalogPage;\n"],"names":["dispatch","useDispatch","uniqueCarBrands","useSelector","selectUniqueCarBrands","rentalPrices","selectRentalPrices","_useState","useState","brand","price","minMileage","maxMileage","_useState2","_slicedToArray","formData","setFormData","useEffect","clearFilters","brandOptions","map","value","label","priceOptions","concat","formatNumberWithCommas","toString","replace","_jsxs","onSubmit","event","preventDefault","setFilters","autoComplete","children","_jsx","htmlFor","Select","id","name","placeholder","onChange","selectedOption","_objectSpread","options","find","option","isClearable","isSearchable","blurInputOnSelect","Number","String","type","parseInt","target","isNaN","onClick","itemLimitCars","selectItemLimitCars","error","selectError","isLoading","selectIsLoading","allCars","selectAllCars","filters","selectFilters","currentPage","setCurrentPage","fetchLimitCars","fetchAllCars","visibleCars","filteredCars","_toConsumableArray","filter","car","make","rentalPrice","slice","mileage","getVisibleCarsByFilters","isShowList","length","isShowButton","Container","FiltersForm","PCenterText","CatalogList","CarCard","BtnLoadMore","fetchLoadMoreCars","prevPage"],"sourceRoot":""}